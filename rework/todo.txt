- allegro
- focus on RTTI
- clean up C++ code
- better documentation
- update copyrights
- includes
- better exceptions and logging
- const / constexpr
- excess copying

- quadtree bounds are level
- "collison rect" is rect that is camera
- only get entitys that are inside or border the "camera"

- docs / readthedocs -> repo wiki / repo website / repo settings

https://github.com/alecthomas/entityx/blob/master/README.md
https://github.com/alecthomas/entityx/blob/master/examples/example.cc

renderer:
- split update and rendering threads?

- particle engine
- parallax
- implement serialization
	- call serializecomponetns from serailize suystem using eneityx
	- serializecomponents contain information about what this entity needs to load
	- use al_config format to easily support classes that require serialization

http://liballeg.org/a5docs/trunk/display.html
https://www.youtube.com/watch?v=NAFK0WOArZA&index=4&list=PL6B459AAE1642C8B4
https://readthedocs.org/

profile code for lags https://docs.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-cpu-sampling

- camera

test:
- shadermanager / shaders
- camera (implement first!)

make some api calls have alternative shorthands.
e.g. Locator::get<World>()->m_systemManager to World::SystemManager()-> or something...
using typedefs maybe? or #defines?
e.g. AUDIOMANAGER()->play("song");
or AudioManager()->play("song");
etc...

serializer
camera
movesystem
rendersystem