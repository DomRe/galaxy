- allegro
- focus on RTTI
- clean up C++ code
- better documentation
- update copyrights
- includes
- better exceptions and logging
- https://wiki.allegro.cc/index.php?title=Achieving_Resolution_Independence
- const / constexpr
- excess copying
- fix services destructors...
- quadtree bounds are level
- "collison rect" is rect that is camera
- only get entitys that are inside or border the "camera"

- atlas idea: https://github.com/Nooskewl/crystal-picnic/blob/master/src/atlas.cpp
- docs / readthedocs -> repo wiki / repo website / repo settings
- add systems to applciation
- may need to reposition allegro window //al_set_new_window_position(x, y);
	
- audio is now assosiated with systems and events
- loads from and audiomanager

https://github.com/alecthomas/entityx/blob/master/README.md
https://github.com/alecthomas/entityx/blob/master/examples/example.cc

renderer:
- only draw stuff that is in view - think quadtree
- use atlas drawing for performance :3
- camera system?
- split update and rendering threads?
https://gamedev.stackexchange.com/questions/58086/rendering-order-in-an-entity-system

- particle engine
- implement serialization
	- call serializecomponetns from serailize suystem using eneityx
	- serializecomponents contain information about what this entity needs to load
	- use al_config format to easily support classes that require serialization

http://liballeg.org/a5docs/trunk/display.html
https://www.youtube.com/watch?v=NAFK0WOArZA&index=4&list=PL6B459AAE1642C8B4
https://readthedocs.org/



update()
{

	e.each<spr>(e, sc)
	{
		layers[sc.layer](sc);
	}

}

draw()
{
	for (auto& l : layers)
	{
		l.draw()
	}
}