- allegro
- focus on RTTI
- clean up C++ code
- better documentation
- update copyrights
- includes
- better exceptions and logging
- const / constexpr
- excess copying
- docs / readthedocs -> repo wiki / repo website / repo settings

https://github.com/alecthomas/entityx/blob/master/README.md
https://github.com/alecthomas/entityx/blob/master/examples/example.cc

renderer:
- split update and rendering threads?

- particle engine
- parallax
- implement serialization
	- call serializecomponetns from serailize suystem using eneityx
	- serializecomponents contain information about what this entity needs to load
	- use al_config format to easily support classes that require serialization

http://liballeg.org/a5docs/trunk/display.html
https://www.youtube.com/watch?v=NAFK0WOArZA&index=4&list=PL6B459AAE1642C8B4
https://readthedocs.org/

profile code for lags https://docs.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-cpu-sampling

test:
- shadermanager / shaders
- camera / level / tmx

serializer
camera
movesystem
rendersystem

render gui according to screen
render world according to camera
screen is camera

each layer of a map is a bitmap
so each layer is seperate and we only render a subsection of the bitmap based off of the camera
-> then we pass that to the layering system
e.g.
layer 0 - bg
layer 1 - animated bg
layer 2 - player
layer 3 - top of tree layer

etc

only bitmaps we update are ones marked "animated"
AnimatedTile -> Tile?
look into new tmx docs

implement packing code myself...
replace shitty external tools...