Redshift:
- air resistance
- collision callbacks

STARMAP:
- move/copy constructors

QUASAR:
- C++20 review when eventual performance improvements are required.
- QuadTree spacial partitioning for rendering.

ALL:
- Investigate other usages of C++20 coroutines.
- See https://github.com/RandyGaul/cute_headers/blob/master/cute_coroutine.h for ideas.
- Timer, StateMachine, Textbox, ThreadPool

DEV_TOOLS:
- physics tools
- export to json / save as json
- documentation
- cleanup
- 'static' cleanup

Galaxy:
- Restore data-driven design
- merge ecs with world
- merge redshift with physicssystem
- merge various meta.hpps into meta folder


THE PLAN:
- Need to integrate clang-tidy and clang-format.
- Need to integrate microsoft code analysis.
- All around CMAKE.


- namespaces for classification over filenames i.e. galaxy::SpriteComponent -> galaxy::components::renderable.
- remove namespace commets
- update include headers to match filepath
- Engine needs to be cohesive.
- fix move/copy


- Async asset loading.
- Each class requires ability to be serialized -> prefereably to JSON or Lua.
- Use of coroutines over threading.
- Proper use of 'noexcept', 'static', and 'multithreading'.
- Every Class Should have a JSON & Lua interface.
- Utilize GSL.
- Dependencies should only abstract away system specific implementations.
- coroutines

https://github.com/nlohmann/json/#arbitrary-types-conversions
https://github.com/EQMG/Acid
https://github.com/asmei1/tinycoro


TODO:
- graphics
- map
- physics
- systems
- tools
- ui