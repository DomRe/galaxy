- profile code for lag https://docs.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-cpu-sampling
- test code for memory leaks
- review all compilation warnings
- integrate lua better
	https://sol2.readthedocs.io/en/latest/api/usertype.html
	https://sol2.readthedocs.io/en/latest/tutorial/cxx-in-lua.html
	https://sol2.readthedocs.io/en/latest/tutorial/functions.html
	- allow for creating entities in lua.
	- even assigning components!
- fix category headers for v1.0.
- more physics shapes from tmx maps.
- https://old.reddit.com/r/gamedev/comments/8hmn0y/can_someone_give_me_a_practical_example/ -> ecs example usage 
http://gameprogrammingpatterns.com/state.html
https://wiki.allegro.cc/index.php?title=Allegro_5_Tutorial/Threads
https://gamedevelopment.tutsplus.com/articles/how-to-build-a-jrpg-a-primer-for-game-developers--gamedev-6676#architecture
https://www.gamedev.net/forums/topic/681473-handling-multiple-levels-or-scenes-within-a-world/
- split up doxygen documentation on rtfd and take advantage of toc.
	- refer to: https://breathe.readthedocs.io/en/latest/index.html	
- googletest or some other testing framework
- travis-ci build system:
[![Linux & OSX Build Status](https://travis-ci.org/reworks/starlight.svg?branch=master)](https://travis-ci.org/reworks/starlight)
This project uses [premake5](https://github.com/premake/premake-core/) and supports Windows, Linux and Mac OS. Please note that only Ubuntu 18.04 is supported for linux.

- write own ui.
- reflect on box2d / or custom simple physics solution.
- move lua into system locator. use local variables over global variables.
- ui should load from lua files maybe?
- go over textbooks, appdev, etc to see if project can be improved.


docs notes:
	- make a note in docs that when adding folder to the config file they must have a '/' on the end if they are folders.
	- make a note about objects and physics in tmxmap docs with name of object being script name.
	- make a note about entt destroying components and to not allocate memory using components
	- make a note in docs that when making text objects in map, text fontfamily and size must be in fontbook in format: fontfamilySize and that parse code will remove spaces first.
		- and size is pixelsize not pointsize
	- and about the layer for objects being explictitly specified in properites of layer.
	- make a note that the engine operates on degrees, but allegro draws in radians.
	- make a note about layerrs and tmx mpa
	- make a note aboutt physics objects only being created if layreri s named collision, also note that it doesnt matter where textrues and stuff in tmx path too because only the last file name in the path is used.
		- i.e. if in tmx map the path for tiles is "textures/tiles.png" the engine wl process this as "tiles.png"
	- only embedded tilesets supported for now.
	- tile rendeirng issues, refer to original code ?
	- ensure tmx layer names are unique for ALL maps.
	- when serializing, you have to serialize engine components and tags, engine does not do it for you and then manually update physicscomponents parent entity.
	- talk about nulltexture and nullsound and nullanimation, etc which is used on defaultconstructed components.
	- docs note that first state is automatically loaded and last state is automatically unloaded
	- docs note abouit registering tags and components

    - sandbox notes:
		- loading screens between states
		- resources are loaded on a differnet thread
		- fix up and rewrite sandbox to test all parts of engine

    - serializable classes:
		- music
		- statemachine
		- animation
		- animationframe
		- registry in world.hpp
		- transformcomponent
		- physicscomponent
			- may need to update internal entity during deserialization
		- rendercomponent
		- animationcomponent
		- cameratag
		- vector2, vector3, rect (but as types so they can be serialized, not important to serialize each one at game save / load leave it up to where they are being used).